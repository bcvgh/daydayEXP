package com.bcvgh.core.exploit.exp;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bcvgh.core.exploit.BaseTemplate;
import com.bcvgh.core.placeholder.PlaceHolder;
import com.bcvgh.core.pojo.Input;
import com.bcvgh.core.pojo.Payload;
import com.bcvgh.utils.HttpTools;
import com.bcvgh.utils.Response;

import java.net.URLEncoder;
import java.util.*;
import java.util.regex.Pattern;

public class ExpTemplateImp extends BaseTemplate implements ExpTemplate {
    public Boolean isExploited;
    public JSONObject exp;
    public HashMap<String,Object> header;
    public Map result = new HashMap<String,String>();
    public Input input ;
    public Object expPost;
    public String expGet;
    public String patternText;
    public String status_code;

    public ExpTemplateImp(String url, Payload payload , Input input) {
        super(url, payload);
        this.exp = payload.exp;
        this.input = input;
    }

    @Override
    public Map exploitVul(String type){
        this.result.put("name",this.name);
        List<String> keys = new ArrayList<>(this.exp.keySet());
        Collections.reverse(keys);
        for (String key : keys) {
            this.initStep(key);
            if (this.expPost != null) {
                Response res = HttpTools.post(this.url.concat(this.expGet), this.expPost, this.header, "UTF-8");
                if (this.ExpRequest(res, type)) {
                    return this.result;
                }
            }
            else if (expGet !=null) {
                Response res = HttpTools.get(this.url.concat(expGet), this.header, "UTF-8");
                if (this.ExpRequest(res, type)) {
                    return this.result;
                }
            }
        }
        return this.result;
    }

    @Override
    public void initStep(String value){
        JSONObject stepContent = this.exp.getJSONObject(value);
        stepContent = PlaceHolder.dealPlaceHolder(stepContent,this.input);
        this.expGet = stepContent.getString("expGet");
        if (stepContent.getString("expPost")!=null){
            PlaceHolder placeHolder = new PlaceHolder(this.input, (String) stepContent.get("expPost"));
            this.expPost = placeHolder.result!=null?placeHolder.result:stepContent.getString("expPost");
        }else {
            this.expPost = null;
        }
        this.patternText = stepContent.getString("pattern");
        this.header = new HashMap<>(stepContent.getJSONObject("header"));
        this.status_code = stepContent.getString("status_code");
        if (this.result.keySet().contains("result")) this.result.remove("result");
    }

    @Override
    public Boolean ExpRequest(Response res,String type) {
        if (this.result.get("result")!=null){
            this.result.remove("result");
        }
        if (!Arrays.asList(this.status_code.split(",")).contains(String.valueOf(res.getCode())) || (res.getText()!=null && res.getText().contains("Burp Suite"))){
            this.isExploited = false;
            return true;
        }
        String resText = this.resMatch(res,this.patternText);
        if (resText!=null){
            this.isExploited = true;
            if (type.equals("upload") && (this.resMatch(resText,Pattern.compile("(.*\\.[a-zA-Z]{1,4})")))!=null){
                this.input.setShellpath(resText);
            } else if (type.equals("upload")) {

            } else {
                this.result.put("result", resText);
            }
        }
        if (resText==null && res.getCode()!=200){
            this.isExploited = true;
            this.result.put("result", "");
            ;}
        else if (resText==null && res.getCode()==200){
            this.isExploited = false;
        }
        return false;
    }
}
