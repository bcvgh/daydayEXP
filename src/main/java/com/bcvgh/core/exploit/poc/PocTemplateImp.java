package com.bcvgh.core.exploit.poc;

import com.alibaba.fastjson.JSON;
import com.bcvgh.core.placeholder.PlaceHolder;
import com.bcvgh.core.pojo.Input;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import com.bcvgh.core.DnsApi;
import com.bcvgh.core.exploit.BaseTemplate;
import com.bcvgh.core.pojo.Payload;
import com.bcvgh.core.pojo.Poc;
import com.bcvgh.utils.Constant;
import com.bcvgh.utils.HttpTools;
import com.bcvgh.utils.Response;
import javafx.scene.control.TextArea;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

public class PocTemplateImp extends BaseTemplate implements PocTemplate {
    public Object pocPost;
    public String pocGet;
    public Pattern pattern;
    public HashMap<String, Object> header;
    public String status_code;
    public Poc poc;
    private Payload payload;
    public Input input;
    //
    private TextArea textArea;

    public PocTemplateImp(String url, Payload payload, Input input ,TextArea textArea) {
        super(url, payload);
        this.input = input;
        this.payload = payload;
        this.poc = this.payload.poc;
        this.header = this.poc.getHeader();
        this.pocGet = this.poc.getPocGet();
        if (this.poc.getPocPost()!=null){
            PlaceHolder placeHolder = new PlaceHolder(input, (String) this.poc.getPocPost());
            this.pocPost = placeHolder.result!=null?placeHolder.result:this.poc.getPocPost();
        }else {
            this.pocPost = this.poc.getPocPost();
        }

        this.pattern = this.poc.getPattern();
        this.status_code = this.poc.getstatus_code();
        //
        this.textArea = textArea;
    }


    @Override
    public void checkVul() {
        if (this.pocPost != null) {
            Response res = HttpTools.post(this.url.concat(this.pocGet), this.pocPost, this.header, "UTF-8");
            this.PocRequest(res);
        } else if (this.pocGet != null) {
            Response res = HttpTools.get(this.url.concat(this.pocGet), this.header, "UTF-8");
            this.PocRequest(res);
        }
    }

    @Override
    public void PocRequest(Response res) {
        if (Arrays.asList(this.status_code.split(",")).contains(String.valueOf(res.getCode())) && (res.getText()==null || !res.getText().contains("Burp Suite"))){
            String resText = this.resMatch(res.getText(), this.pattern);
            if (resText != null || (resText == null && res.getCode() != 200)) {
                if (!this.input.getDnslog().equals("127.0.0.1") && (this.payload.StringPayload.contains(this.input.getDnslog()) || JSON.toJSONString(this.payload.poc).contains("{{serialization}}"))) {
                    DnsApi dnsApi = new DnsApi(this.input.getDnslog(), Constant.ConfigPath);
                    if (dnsApi.getDnsLog()) {
                        Platform.runLater(() -> this.textArea.appendText("[+] "+this.url+"存在"+this.name+"漏洞!请使用对应的漏洞利用模块！\n"));
                        return;
                    } else {
                        Platform.runLater(() -> this.textArea.appendText("[-] "+this.url+"不存在"+this.name+"漏洞...\n"));
                        return;
                    }
                } else {
                    Platform.runLater(() -> this.textArea.appendText("[+] "+this.url+"存在"+this.name+"漏洞!请使用对应的漏洞利用模块！\n"));
                    return;
                }
            }
        }
        Platform.runLater(() -> this.textArea.appendText("[-] "+this.url+"不存在"+this.name+"漏洞...\n"));
    }


}