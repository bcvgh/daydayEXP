package com.bcvgh.core.exploit.poc;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

import com.alibaba.fastjson.parser.Feature;
import com.bcvgh.controller.VulManagerController;
import com.bcvgh.core.exploit.BaseUsage;
import com.bcvgh.core.pojo.Input;
import com.bcvgh.core.pojo.Payload;
import com.bcvgh.utils.Constant;
import com.bcvgh.utils.FileUtil;
import com.bcvgh.utils.PocUtil;
import javafx.scene.control.TextArea;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.*;

public class PocUsageImp extends BaseUsage {
    private PocTemplateImp pocTemplate;
    public Input input;
    private TextArea textArea;
    private static final Logger LOGGER = LogManager.getLogger(PocUsageImp.class.getName());

    public PocUsageImp(String url,String tag,String name,Input input,TextArea textArea){
        super(url,tag,name);
        this.input = input;
        this.textArea =textArea;
        if (this.name!=null){
            this.PocUsage(this.url, this.tag, this.name);
        }else {
            this.PocUsage(this.url ,this.tag);
        }
    }


    private void PocUsage(String url, String tag, String name){
        try{
            Payload payload = Payload.getPayload(tag,name,this.input);
            this.pocTemplate = new PocTemplateImp(url, payload,this.input,this.textArea);
            this.pocTemplate.checkVul();
        }catch (Exception e){
            LOGGER.error(e.getMessage());
        }
    }

    private void PocUsage(String url, String tag){
        ArrayList<String> vuls = PocUtil.tag_vul.get(tag);
        ExecutorService executor = Executors.newFixedThreadPool(5);
        for (String name : vuls) {
            Payload payload = Payload.getPayload(tag,name,this.input);
            PocThread c = new PocThread(url, payload,this.input,this.textArea);
            executor.submit(c);
        }
        executor.shutdown();
        try {
            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                LOGGER.warn("线程池未在指定时间内完成所有任务!");
            }
        } catch (InterruptedException e) {
            LOGGER.error(e.getMessage()+"(多线程任务失败!)");
        }
    }
}

