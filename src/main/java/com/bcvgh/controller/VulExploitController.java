package com.bcvgh.controller;

import com.bcvgh.Main;
import com.bcvgh.core.exploit.exp.ExpUsageImp;
import com.bcvgh.core.pojo.Input;
import com.bcvgh.core.pojo.Payload;
import com.bcvgh.core.unser.annotation.*;
import com.bcvgh.core.unser.core.pojo.UnSerInput;
import com.bcvgh.core.unser.core.enums.Gadgets;
import com.bcvgh.core.unser.core.enums.Types;
import com.bcvgh.core.unser.gadgets.ObjectPayload;
import com.bcvgh.utils.OtherUtil;
import com.bcvgh.utils.PromptUtil;
import javafx.application.Platform;
import com.bcvgh.core.unser.gadgets.util.*;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Text;
import com.bcvgh.core.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;


public class VulExploitController {

    @FXML
    private MenuBar VulName;

    @FXML
    private Menu VulChoice;

    @FXML
    private TextArea VulOut;

    @FXML
    private Text exploitType;

    @FXML
    private Button VulExploit;

    @FXML
    private GridPane CustomBar;

    private HashMap<String, Control> ExtraControls = new HashMap<>();

    private String url;

    private String tag;

    private String name;

    private String type;

    private String gadget_name;
    private String gadget_type;

    private static final Logger LOGGER = LogManager.getLogger(VulExploitController.class.getName());

    public VulExploitController(String url,String tag,String name,String type) {
        this.url = url;
        this.tag = tag;
        this.name = name;
        this.type = type;
    }


    public void initialize() {
        this.VulOut.setWrapText(true);
        this.VulOut.setEditable(false);
        this.VulChoice.setText(this.name);
        switch (this.type){
            case "custom":
                this.exploitType.setText("自定义利用:");
                this.VulExploit.setText("利用");
                break;
            case "upload":
                TextArea uploadContext = new TextArea();
                uploadContext.setPrefSize(150,150);
                this.exploitType.setText("上传内容:");
                this.CustomBar.add(uploadContext,0,1);
                Insets marginUpload = new Insets(10, 10, 10, 10);
                this.CustomBar.setMargin(uploadContext, marginUpload);
                GridPane.setRowSpan(uploadContext,4);
                this.ExtraControls.put("webshell",uploadContext);
                this.VulExploit.setText("上传");
                break;
            case "exec":
                TextField Command = new TextField();
                Command.setPrefHeight(20);
                this.exploitType.setText("输入命令:");
                this.CustomBar.add(Command,0,1);
                Insets marginCommand = new Insets(10, 5, 10, 0);
                this.CustomBar.setMargin(Command, marginCommand);
                this.ExtraControls.put("command",Command);
                this.VulExploit.setText("执行");
                break;
            case "deserialize":
                this.exploitType.setText("构造利用链:");
                //gadget菜单栏
                MenuBar menuBar = new MenuBar();
                menuBar.setPrefHeight(20);
                Insets marginUnSer = new Insets(10, 5, 10, 0);
                Menu Gadget = new Menu("请选择利用链");
                for (Gadgets i : Gadgets.values()){
                    MenuItem menuItem = new MenuItem(i.name());
                    menuItem.setOnAction(event -> {
                        Gadget.setText(menuItem.getText());

                    });
                    Gadget.getItems().add(menuItem);
                }
                menuBar.getMenus().add(Gadget);
                this.CustomBar.add(menuBar,0,1);
                this.CustomBar.setMargin(menuBar, marginUnSer);

                MenuBar menuBarType = new MenuBar();
                menuBarType.setPrefHeight(20);
                Insets marginUnSerType = new Insets(10, 5, 10, 0);
                Menu Type = new Menu("选择类型");
                for (Types s : Types.values()){
                    MenuItem menuItemType = new MenuItem(s.name());
                    menuItemType.setOnAction(events -> {
                        Type.setText(menuItemType.getText());
                    });
                    Type.getItems().add(menuItemType);
                }
                menuBarType.getMenus().add(Type);

                Gadget.textProperty().addListener((observable, oldValue, newValue) -> {
                    this.gadget_name = newValue;
                    if (oldValue.equals("请选择利用链")){
                        this.CustomBar.add(menuBarType,0,2);
                        this.CustomBar.setMargin(menuBarType, marginUnSerType);
                    }
                    else {ClickAction();}
                    });
                Type.textProperty().addListener((observable1, oldValue1, newValue1) -> {
                    this.gadget_type = newValue1;
                    ClickAction(); });
                break;
        }


    }

    private void ClickAction(){
        this.CustomBar.getChildren().removeIf(node ->  GridPane.getRowIndex(node) !=null && GridPane.getRowIndex(node)>2);
        this.ExtraControls = new HashMap<>();
        String[] parameters = ((String) AnnotationUtils.getAnnotationValue(ObjectPayload.getPayloadClass(this.gadget_name,this.gadget_type), RequireParameter.class,"value")).split(",");
        if (parameters==null) return;
        for (String parameter : parameters) {
            Label label = new Label(parameter+":");
            label.setPrefHeight(20);
            TextField textField = new TextField();
            textField.setPrefHeight(20);
            this.CustomBar.add(label, 0, 3);
            this.CustomBar.add(textField, 0, 4);
            this.ExtraControls.put(parameter,textField);
            Insets marginCommandUnSer = new Insets(10, 5, 10, 0);
            this.CustomBar.setMargin(label, marginCommandUnSer);
            this.CustomBar.setMargin(textField, marginCommandUnSer);
        }
    }

    @FXML
    void Exploit(ActionEvent event) {
        this.VulOut.setText("");
        if (this.ExtraControls.isEmpty() && !this.type.equals("custom")){
            PromptUtil.Alert("警告","payload构造失败，请确认参数是否正确！");
            return;
        }
        Input input = new Input(null,null,null,null,this.url, OtherUtil.getRandomString(4),null);
        if (this.type.equals("deserialize")){
            UnSerInput unSerInput = new UnSerInput(this.gadget_name,this.gadget_type,null,null,null,null,null,null,null);
            for (String ExtraControl : this.ExtraControls.keySet()){
                Control control = this.ExtraControls.get(ExtraControl);
                try {
                    Reflections.setFieldValue(unSerInput,ExtraControl,((TextField) control).getText());
                } catch (Exception e) {
                    LOGGER.error(e.getMessage());
                    return;
                }
            }
            UnSerInput newUnSer = new UnSerInput(unSerInput);
            if (newUnSer.getResourcePath()!=null && newUnSer.getBytecode()==null){
                PromptUtil.Alert("警告","读取路径错误！");
                return;
            }
            byte[] serialBytes = UnserPayload.GenSerial(newUnSer);
            input.setSerialization(serialBytes);
        }
        else {
            for (String ExtraControl : this.ExtraControls.keySet()){
                Control control = this.ExtraControls.get(ExtraControl);
                try {
                    if (control instanceof TextArea){
                        Reflections.setFieldValue(input,ExtraControl,((TextArea) control).getText());
                    }
                    else if (control instanceof TextField){
                        Reflections.setFieldValue(input,ExtraControl,((TextField) control).getText());
                    }
                }catch (Exception e){
                    LOGGER.error(e.getMessage());
                }

            }
        }
        Payload payload = Payload.getPayload(this.tag,this.name,input);
        ExpUsageImp expUsage = new ExpUsageImp(this.url,payload, input);
        Map result = expUsage.result;
        try {
            for (Object i : result.keySet()){
                if (i.equals("prompt")){
                    Platform.runLater(() -> this.VulOut.appendText((String) result.get(i)));
                }
                if (i.equals("result")){
                    Platform.runLater(() -> this.VulOut.appendText((String) result.get(i)));
                }

            }
        }
        catch (Exception e){
            LOGGER.error(e.getMessage()+"(poc scan打印出错!)");
        }
    }

}
